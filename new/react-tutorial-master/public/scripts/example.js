
var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },
  del:function()
  {

  },
  render: function() {
    var name = this.props['author'];
    console.log("props", name);
    return (
      <div className="media mb-3">
      <img
        className="mr-3 bg-light rounded"
        width="48"
        height="48"
        src={`https://api.adorable.io/avatars/48/${name.toLowerCase()}@adorable.io.png`}
        alt={name}
      />
      <div className = "media-body p-2 shadow-sm rounded bg-light border">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <div className="row">
          <div className="col-sm-6"> <span dangerouslySetInnerHTML={this.rawMarkup()} /> </div>
        </div>
      </div>
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <div className="pt-3">
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
        </div>
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <div>
      <h1> Comment below </h1>

      <form className="form-group" onSubmit={this.handleSubmit}>
        <input
          type="text"
          className="form-control m-3"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          className="form-control m-3"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />

      </form>
    </div>
    );
  }
});

ReactDOM.render(
  <div>
    <div className="App container bg-light shadow pt-3">
      <div className = "row">
            <div className="col-sm-6">
              <img src="./logo.jpeg" style={{"margin-bottom":'25px'}} />
            </div>
            <div className="col-sm-6">
              <h3>Toscano</h3>
               <p>Koramangala 7th Block   ·  Casual Dining Opening hours · Open now
                Today  12noon – 11pm
                See more
                Happy Hours: # Monday To Friday 4 Pm To 8 Pm Enjoy Selected Beverages A Flat Price of 199/- # Buy a pitcher of Sangria/Mojito or a Beer Bucket & Get A Pizza Free* Buy 1 Get 1 on Sangria and Select Cocktails: All day everyday! # 50% off on all pizza Mon-Wed
                Address
                2nd Floor, Forum Mall, Koramangala 7th Block, Bangalore
                </p>
            </div>
        </div>
      </div>
    <div className="App container pt-5">
      <CommentBox url="/api/comments" pollInterval={2000} />
    </div>
</div>

  ,
  document.getElementById('content')
);
